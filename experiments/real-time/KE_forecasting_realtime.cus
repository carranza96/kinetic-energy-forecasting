<ui_settings>
    <version>2.8</version>
    <model_locked>False</model_locked>
    <canvas_bg_color>#ffffff</canvas_bg_color>
    <initialization_code><![CDATA[# NOTE: Variables and functions defined here will be
# available for use in all Macro and Expression scripts.
# NOTE: This code is always executed prior simulation start.

# Variable 'SETTINGS_DIR' holds directory where loaded Panel .cus file is located.
# Also you can call 'get_settings_dir_path()' function in any
# Macro and Expression scripts to get the same directory.
SETTINGS_DIR = get_settings_dir_path()

# The 'add_to_python_path(folder)' function can be used to add custom folder
# with Python files and packages to the PYTHONPATH. After folder is added, all Python 
# files and Python packages from it can be imported into the SCADA Namespace.

# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# Numpy module is imported as 'np'
# Scipy module is imported as 'sp'
# Schematic Editor model namespace is imported as 'scm'
# Function for printing to HIL SCADA Message log is imported as 'printf'.

# Importamos las librerías según el archivo keforecasting.py
import os
from os import path
import sys

sendto_dir = path.expandvars(r'C:\Users\riquelme\AppData\Roaming\typhoon\2022.4 SP1\python_portables\python3_portable\Lib\site-packages') 
add_to_python_path(os.path.normpath(sendto_dir))
import tensorflow as tf

import pandas as pd
import datetime as dt
#from sklearn.linear_model import LinearRegression
import numpy as np
import matplotlib
matplotlib.use("Agg")
import time # JMR: para medir tiempo de entrenamiento
import matplotlib.pyplot as plt
#import tensorflow as tf
from sklearn.preprocessing import MinMaxScaler
from joblib import dump, load

start=time.time()

# Definimos el contador de tiempo para el timer de la macro
time_count=0

ypred=0
ytest=0
elapsed=0

return_dict={"prediccion":ypred,
            "valorreal":ytest,
            "elapsed":elapsed,
            "timecount":time_count}
            

##############################
# 1. READ DATASET
##############################

# Read data (for instance only the 12 csv files that correspond to 2020)
model_path = hil.get_model_file_path()
#data_path=model_path+"\Data"

# Ruta ordenador despacho
data_path="C:\\Users\\riquelme\\OneDrive - Universidad Politécnica de Madrid\\Curso 22-23\\Paper KE\\Data"

#Ruta ordenador personal
#data_path=r"C:\Users\jose_\OneDrive - Universidad Politécnica de Madrid\Curso 22-23\Paper KE\Data"
print(data_path)

files=os.listdir(data_path)
# files = sorted(os.listdir(data_path))[12*5-3:] # JMR: esta linea no devuelve ningun archivo
print(files)
df = pd.concat([pd.read_csv(f"{data_path}/{filename}") for filename in files]) # Read into pandas dataframe

# print(df.shape) # JMR: shape nos da las dimensiones de un dataframe

# JMR: voy a intentar guardar df para ver qué pinta tiene
# JMR: una vez que lo tenemos guardado ya no hace falta
# df.to_csv("C:\\Users\\riquelme\\OneDrive - Universidad Politécnica de Madrid\\Curso 22-23\\Paper KE\\Modelos_US\\df.csv",index=False) 

##############################
# 2. PREPROCESSING
##############################

# Format the pandas dataframe to put start_time at index (casted to datetime) and cast value to float
df = df[["start_time", "value"]]
df.columns = ["Datetime", "Value"]
df["Value"] = df["Value"].astype("float")
df["Datetime"] = pd.to_datetime(df["Datetime"])
df.index = df.pop("Datetime")

# Transform the data to evenly spaced series (i.e. fill minutes that do not have a value with next seen value)
df = df.asfreq("1min", method="backfill")

# Min-Max normalization (We found that the time series 
# historical minimum was 130 and the maximum 260)
SCALER = MinMaxScaler((-1,1)).fit([[130.0], [260.0]])
df[['Value']] = SCALER.transform(df[['Value']])

# JMR: voy a intentar guardar df para ver qué pinta tiene
# df.to_csv("C:\\Users\\riquelme\\OneDrive - Universidad Politécnica de Madrid\\Curso 22-23\\Paper KE\\Modelos_US\\df_minmax_filled.csv",index=False) 

# Transform the dataset into a supervised machine learning problem (time series forecasting)
# In which for each past history window of size x, we have to predict the next y values (forecasting horizon)
# We define for instance a past history window of size 10 minutes, to predict the next 5 minutes
PAST_HISTORY = 1440 # JMR: utilizamos las últimas 24 horas (1440 minutos)
FORECASTING_HORIZON = 240 # JMR: para predecir las próximas 4 (240 minutos) 

# JMR: las siguientes 7 líneas realentizan el proceso y no tengo claro que tengan que
# en la inicialización del SCADA.

# JMR: Quizás podríamos hacer esto en la macro fila a fila

# Build past history features (Now each row (each timestamp) has PAST_HISTORY columns (x_t) with the previous values
for i in range(PAST_HISTORY, 0, -1):
        df[f"X_{i}"] = df["Value"].shift(i)
        
# Build forecasting horizon (Now each row also has FORECASTING_HORIZON columns (y_t) with future values to be predicted)
for i in range(FORECASTING_HORIZON):
        df[f"y_{i}"] = df["Value"].shift(-i)
        
# Now we need to drop rows with NaNs, because at the beginning and end of the dataset there are missing values when doing the windowing
# We also drop the Value column, since it is the same as X_1
df = df.drop("Value", axis=1)
df = df.dropna()

# JMR: voy a intentar guardar df para ver qué pinta tiene
# JMR: Vamos a intentar sacar por ejemplo 1440 filas
# df_reduced=df.iloc[0:1440,:]
# df_reduced.to_csv("C:\\Users\\riquelme\\OneDrive - Universidad Politécnica de Madrid\\Curso 22-23\\Paper KE\\Modelos_US\\df_ML_format.csv",index=False)

##############################
# 3. TRAIN/TEST SPLIT
##############################

# Now we have the dataset ready to be used within a supervised ML algorithm
# We just need to split the dataset into train/test
# For instance we take the first 9 months for trainin, and the last 3 months (90 days) for testing
end_date = df.index.max() # Get the last day of the dataset
start_test = end_date - dt.timedelta(days=90) # Get the day in which the test set should start
df_train = df[df.index <= start_test].copy()
df_test = df[df.index > start_test].copy()

fechas=df_test.index

# Split each dataframe into X (past history features) and y(values forecasting horizon)
def split_input_output(df_):
    df = df_.copy()
    y_cols = [c for c in df.columns if c.startswith("y_")]
    X_cols = [c for c in df.columns if c.startswith("X_")]
    y = df[y_cols].values
    X = df[X_cols].values
    return X, y

X_train, y_train = split_input_output(df_train)
X_test, y_test = split_input_output(df_test)

# JMR: X_test ya es un array? Sí
#X_test_reduced=X_test[1:100,:]
#pd.DataFrame(X_test_reduced).to_csv(r"C:\Users\jose_\OneDrive - Universidad Politécnica de Madrid\Curso 22-23\Paper KE\Modelos_US\X_test_reduced.csv",index=False) 

# The data preprocessing finishes at this point, and we are ready to train a ML model with the training set, and evaluate over the test set
################################################
# 5. MODEL TRAINING
################################################
use_lr = True # Flag to use LinearRegression or LSTM model
train = False # Flag to train a new model or load a model that was already trained

# JMR: De momento vamos a intentar cargar el modelo LR

################################################
# 5.1 LINEAR REGRESSION
################################################
if use_lr:
#    model_name = 'lr_PH1440_FH240_minmax.joblib'

# JMR: pongo rutas absolutas. En el futuro sería más adecuado rutas relativas

# JMR: en el ordenador del despacho
    model_name="C:\\Users\\riquelme\\OneDrive - Universidad Politécnica de Madrid\\Curso 22-23\\Paper KE\\Modelos_US\\lr_PH1440_FH240_minmax.joblib"

# JMR: en el ordenador personal
#    model_name=r"C:\Users\jose_\OneDrive - Universidad Politécnica de Madrid\Curso 22-23\Paper KE\Modelos_US\lr_PH1440_FH240_minmax.joblib"

    if train:
        model = LinearRegression()
        # Train Model
        model.fit(X_train, y_train)
        # Save model using joblib
        dump(model,model_name)
    
    # Load trained model from file
    model = load(model_name)
    
################################################
# 5.2 LSTM
################################################
else:
    ## Change input shape for LSTM input
    X_train = np.expand_dims(X_train, axis=2)
    X_test = np.expand_dims(X_test, axis=2)
    
    # JMR: en el ordenador del despacho
    model_name = "C:\\Users\\riquelme\\OneDrive - Universidad Politécnica de Madrid\\Curso 22-23\\Paper KE\\Modelos_US\\lstm_PH1440_FH240_minmax.h5"

    # JMR: en el ordenador personal
    #model_name = r"C:\Users\jose_\OneDrive - Universidad Politécnica de Madrid\Curso 22-23\Paper KE\Modelos_US\lstm_PH1440_FH240_minmax.h5"
    
    if train:
        model = tf.keras.Sequential([
            tf.keras.layers.LSTM(64, return_sequences=True, input_shape=X_train.shape[1:]),
            tf.keras.layers.Flatten(),
            tf.keras.layers.Dense(FORECASTING_HORIZON),
        ])
        lr_schedule = tf.keras.optimizers.schedules.ExponentialDecay(
        initial_learning_rate=1e-3,
        decay_steps=1000,
        decay_rate=0.96)
        optimizer = tf.keras.optimizers.Adam(learning_rate=lr_schedule) 
        model.compile(optimizer=optimizer, loss='mae')
        model.fit(X_train, y_train, validation_data=(X_test,y_test), batch_size=512, epochs=100)
        
        model_name = "C:\\Users\\riquelme\\OneDrive - Universidad Politécnica de Madrid\\Curso 22-23\\Paper KE\\Modelos_US\\lstm_PH1440_FH240_minmax_JMR.h5"
        
        model.save(model_name)
        
    model = tf.keras.models.load_model(model_name)
    
# JMR: en este punto hemos cargado uno de los dos modelos y con la macro podemos
# empezar a predecir

end=time.time()]]></initialization_code>
    <components>
        <component_data>
                <id>852f88fc539511ed8341001a7dda7115</id>
                <name><![CDATA[Macro]]></name>
                <type>Macro</type>
                <description><![CDATA[]]></description>
                <on_click_code active="False"><![CDATA[# NOTE: The code specified in this handler will be executed on button click.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

]]></on_click_code>
                <on_start_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on simulation start.
# NOTE: Variables specified here will be available in other handlers.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# Globals
global time_count
global model
global X_test
global y_test
global PAST_HISTORY
global FORECASTING_HORIZON
#global y_pred_matrix
global y_test_matrix

y_test_matrix=np.zeros((129600,240))]]></on_start_code>
                <on_timer_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed on timer event.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# 10 segundos son time_interval=600
# time_interval=600 # 10 segundos en SimulationTime
# time_interval=120 # 2 segundos en SimulationTime

global return_dict

#time_interval=1 # 1 segundos en SimulationTime

#SimulationTime=hil.get_sim_time()
# Meter la siguiente línea de codigo cuando queramos que la estimacion se haga cada x
#if SimulationTime > time_count*time_interval:
#    print("Simulation Time: {}".format(SimulationTime))
    
tic=hil.get_sim_time()
#print("tic: {}".format(tic))

X_test_row=X_test[time_count,:]
y_test_row=y_test[time_count,:]
y_pred_row = model.predict(X_test_row.reshape(1, -1))

# De-normalize predictions and labels to evaluate
y_pred_row = SCALER.inverse_transform(y_pred_row.reshape(1, -1))
y_test_row = SCALER.inverse_transform(y_test_row.reshape(1, -1))

#y_pred_matrix[time_count,:]=y_pred_row
#y_test_matrix[time_count,:]=y_test_row

#with open('y_test_matrix.csv','a') as outfile:
#    np.savetxt(outfile,y_test_row)

# Calculate MAE TEST
mae = np.mean(np.abs(y_pred_row-y_test_row))
#print("MAE Test: {}".format(mae))

toc=hil.get_sim_time()
#print("toc: {}".format(toc))

elapsed=toc-tic
#print("elapsed: {}".format(elapsed))

#pd.DataFrame(y_pred_row).to_csv("C:\\Users\\riquelme\\OneDrive - Universidad Politécnica de Madrid\\Curso 22-23\\Paper KE\\Modelos_US\\y_pred_row.csv",header=False,index=False)
#pd.DataFrame(y_test_row).to_csv("C:\\Users\\riquelme\\OneDrive - Universidad Politécnica de Madrid\\Curso 22-23\\Paper KE\\Modelos_US\\y_test_row.csv",header=False,index=False)

#print(y_pred_row.shape)
#print(y_test_row.shape)

return_dict={"prediccion":y_pred_row[0,0],
            "valorreal":y_test_row[0,0],
            "elapsed":elapsed,
            "timecount":time_count}

time_count=time_count+1    
]]></on_timer_code>
                <run_each>1000</run_each>
                <on_stop_code active="True"><![CDATA[# NOTE: The code specified in this handler will be executed after simulation is stopped.
# HIL API is imported as 'hil'
# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

#y_test = SCALER.inverse_transform(y_test.reshape(1, -1))
#pd.DataFrame(y_test).to_csv("C:\\Users\\riquelme\\OneDrive - Universidad Politécnica de Madrid\\Curso 22-23\\Paper KE\\Modelos_US\\y_test.csv",header=False,index=False)
#pd.DataFrame(y_test).to_json("C:\\Users\\riquelme\\OneDrive - Universidad Politécnica de Madrid\\Curso 22-23\\Paper KE\\Modelos_US\\y_test.json")

pd.DataFrame(y_test_matrix).to_csv("C:\\Users\\riquelme\\OneDrive - Universidad Politécnica de Madrid\\Curso 22-23\\Paper KE\\Modelos_US\\y_test_matrix.csv",header=False,index=False)]]></on_stop_code>
                <widget_settings>
                    <x>16.0</x>
                    <y>48.0</y>
                    <width>128</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>5746b4705b8811edb298001a7dda7115</id>
                <name><![CDATA[Predicted vs real]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing values that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)

global return_dict

ypred=return_dict.get("prediccion")
ytest=return_dict.get("valorreal")

data = {
    # analog like signals/data names: ["Analog 1 name","Analog 2 name","Analog N name"]
    "analog_names": ["y_pred","y_test"],
    
    # analog data values: [aVal1,aVal2,aVal3]
    "analog_values": [float(ypred),float(ytest)],
    
    # digital like signals/data names: ["Digital 1 name","Digital 2 name","Digital 3 name"]
    "digital_names": [],
    
    # digital data values: [dVal1,dVal2,aVal3]
    "digital_values": [],
    }
    
displayValue = data
]]></code>
                <analog_signals><![CDATA[[]]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <widget_settings>
                    <x>288.0</x>
                    <y>32.0</y>
                    <width>400</width>
                    <height>200</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[Last 10 seconds]]></x_title>
                    <y_title><![CDATA[Kinetic Energy (GW·s)]]></y_title>
                    <y_range_min>-100.0</y_range_min>
                    <y_range_max>100.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>True</x_axis_title_enabled>
                    <y_axis_title_enabled>True</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>2cf39cbd65a011ed9445001a7dda7115</id>
                <name><![CDATA[Start date]]></name>
                <type>TextDisplay</type>
                <description><![CDATA[]]></description>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

global start_test

# specify Text Display options ('text' part is mandatory)
textDisplayData = {

    # label text
    "text": str(start_test),

    # text color: 'red', 'green', 'blue', 'orange', 'black'
    "text_color": 'black',
}

# mandatory variable used for storing value that will be displayed
displayValue = textDisplayData
]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>32.0</x>
                    <y>112.0</y>
                    <width>200</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>439e8f7465b811edaed6001a7dda7115</id>
                <name><![CDATA[End date]]></name>
                <type>TextDisplay</type>
                <description><![CDATA[]]></description>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

global end_date

# specify Text Display options ('text' part is mandatory)
textDisplayData = {

    # label text
    "text": str(end_date),

    # text color: 'red', 'green', 'blue', 'orange', 'black'
    "text_color": 'black',
}

# mandatory variable used for storing value that will be displayed
displayValue = textDisplayData
]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>32.0</x>
                    <y>160.0</y>
                    <width>200</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>66b7fcb165ba11edb2ec001a7dda7115</id>
                <name><![CDATA[Model]]></name>
                <type>TextDisplay</type>
                <description><![CDATA[]]></description>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

global use_lr

if use_lr:
    model="LR"
else:
    model="LSTM"
    
# specify Text Display options ('text' part is mandatory)
textDisplayData = {

    # label text
    "text": model,

    # text color: 'red', 'green', 'blue', 'orange', 'black'
    "text_color": 'black',
}

# mandatory variable used for storing value that will be displayed
displayValue = textDisplayData
]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>32.0</x>
                    <y>208.0</y>
                    <width>200</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>a649fa2765bc11ed847b001a7dda7115</id>
                <name><![CDATA[MAE]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing values that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)

global return_dict

ypred=return_dict.get("prediccion")
ytest=return_dict.get("valorreal")

data = {
    # analog like signals/data names: ["Analog 1 name","Analog 2 name","Analog N name"]
    "analog_names": ["MAE"],
    
    # analog data values: [aVal1,aVal2,aVal3]
    "analog_values": [float(np.abs(ypred-ytest))],
    
    # digital like signals/data names: ["Digital 1 name","Digital 2 name","Digital 3 name"]
    "digital_names": [],
    
    # digital data values: [dVal1,dVal2,aVal3]
    "digital_values": [],
    }
    
displayValue = data
]]></code>
                <analog_signals><![CDATA[[]]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <widget_settings>
                    <x>288.0</x>
                    <y>224.0</y>
                    <width>400</width>
                    <height>200</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[Last 10 seconds]]></x_title>
                    <y_title><![CDATA[MAE (GW·s)]]></y_title>
                    <y_range_min>-100.0</y_range_min>
                    <y_range_max>100.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>True</x_axis_title_enabled>
                    <y_axis_title_enabled>True</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>84f8450065be11edbaa8001a7dda7115</id>
                <name><![CDATA[Elapsed time]]></name>
                <type>TraceDisplay</type>
                <description><![CDATA[]]></description>
                <data_type>Expression</data_type>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

# mandatory variable used for storing values that will be displayed
# specify data (one pairs of "names" and "values" parts are mandatory)

global return_dict

elapsed=return_dict.get("elapsed")

data = {
    # analog like signals/data names: ["Analog 1 name","Analog 2 name","Analog N name"]
    "analog_names": ["elapsed"],
    
    # analog data values: [aVal1,aVal2,aVal3]
    "analog_values": [float(elapsed)],
    
    # digital like signals/data names: ["Digital 1 name","Digital 2 name","Digital 3 name"]
    "digital_names": [],
    
    # digital data values: [dVal1,dVal2,aVal3]
    "digital_values": [],
    }
    
displayValue = data
]]></code>
                <analog_signals><![CDATA[[]]]></analog_signals>
                <digital_signals><![CDATA[[]]]></digital_signals>
                <streaming_analog_signals><![CDATA[[]]]></streaming_analog_signals>
                <streaming_digital_signals><![CDATA[[]]]></streaming_digital_signals>
                <update_rate>1000</update_rate>
                <execution_rate>None</execution_rate>
                <background_color>white</background_color>
                <widget_settings>
                    <x>688.0</x>
                    <y>24.0</y>
                    <width>400</width>
                    <height>200</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
                <advance_widget_settings>
                    <x_title><![CDATA[Last 10 seconds]]></x_title>
                    <y_title><![CDATA[Elapsed time (s)]]></y_title>
                    <y_range_min>-100.0</y_range_min>
                    <y_range_max>100.0</y_range_max>
                    <time_window>10</time_window>
                    <auto_scale_enabled>True</auto_scale_enabled>
                    <legend_enabled>True</legend_enabled>
                    <x_axis_title_enabled>True</x_axis_title_enabled>
                    <y_axis_title_enabled>True</y_axis_title_enabled>
                    <use_reference_curve>False</use_reference_curve>
                    <reference_curve_code><![CDATA[# NOTE: Global namespace variables are available
# Selected time window is available through variable 'timeWindow'
# Selected update rate is available through variable 'updateRate'

# reference curve data point
curveData = 12.0

# specify curve options ('data' part is mandatory)
refCurveData1 = {
    # reference curve data point
    "data": curveData,

    # curve line style: 'solid', 'dashed', 'dashdot', 'dotted'
    "line_style": "dashed",

    # curve line color: 'red', 'green', 'blue', 'cyan', 'magenta', 'yellow'
    "line_color": 'red',

    # curve line width: float number
    "line_width": 2.0,
    
    # reference curve title
    "title": "Reference curve",

    # show a title in the legend
    "show_in_legend": True
}

# list of reference curves data: [ref1, ref2,...refN]
referenceCurves = [refCurveData1]

]]></reference_curve_code>
                </advance_widget_settings>
            </component_data>
        <component_data>
                <id>ce5467cc667311ed9108001a7dda7115</id>
                <name><![CDATA[Date]]></name>
                <type>TextDisplay</type>
                <description><![CDATA[]]></description>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

global fechas
global return_dict

time_count=return_dict.get("timecount")

# specify Text Display options ('text' part is mandatory)
textDisplayData = {

    # label text
    "text": str(fechas[time_count]),

    # text color: 'red', 'green', 'blue', 'orange', 'black'
    "text_color": 'black',
}

# mandatory variable used for storing value that will be displayed
displayValue = textDisplayData
]]></code>
                <updateRate>1000</updateRate>
                <widget_settings>
                    <x>800.0</x>
                    <y>240.0</y>
                    <width>200</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>b6efabba667711eda3ef001a7dda7115</id>
                <name><![CDATA[Past history (minutes)]]></name>
                <type>TextDisplay</type>
                <description><![CDATA[]]></description>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

global PAST_HISTORY
    
# specify Text Display options ('text' part is mandatory)
textDisplayData = {

    # label text
    "text": str(PAST_HISTORY),

    # text color: 'red', 'green', 'blue', 'orange', 'black'
    "text_color": 'black',
}

# mandatory variable used for storing value that will be displayed
displayValue = textDisplayData
]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>32.0</x>
                    <y>256.0</y>
                    <width>200</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        <component_data>
                <id>d02b1b40667711ed843f001a7dda7115</id>
                <name><![CDATA[Forecasting horizon (minutes)]]></name>
                <type>TextDisplay</type>
                <description><![CDATA[]]></description>
                <code><![CDATA[# HIL API is imported as 'hil'
# NOTE: Only read functions are available from the HIL API

# SCADA API is imported as 'panel'
# SCADA API constants are imported as 'api_const'
# 'WIDGET_HANDLE' constant holds the WidgetHandle object of this widget.
# This object can be used as an argument in SCADA API functions.

global FORECASTING_HORIZON
    
# specify Text Display options ('text' part is mandatory)
textDisplayData = {

    # label text
    "text": str(FORECASTING_HORIZON),

    # text color: 'red', 'green', 'blue', 'orange', 'black'
    "text_color": 'black',
}

# mandatory variable used for storing value that will be displayed
displayValue = textDisplayData
]]></code>
                <updateRate>500</updateRate>
                <widget_settings>
                    <x>32.0</x>
                    <y>304.0</y>
                    <width>200</width>
                    <height>40</height>
                    <appearance><![CDATA[Flat]]></appearance>
                    <hierarchy_position><![CDATA[1]]></hierarchy_position>
                    <is_background><![CDATA[False]]></is_background>
                    <label><![CDATA[]]></label>
                    <use_label>False</use_label>
                </widget_settings>
            </component_data>
        </components>
</ui_settings>